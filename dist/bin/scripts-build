#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const build_1 = __importDefault(require("../lib/build"));
const deploy_1 = require("../lib/deploy");
const utils_1 = require("../lib/utils");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const buildCommands = utils_1.projectConfig.build.buildInfo.commands;
        if (buildCommands && !utils_1.projectConfig.build.buildInfo.usesDbdBuilder) {
            for (const command of buildCommands) {
                console.info(`⏳ running command '${command}'`);
                const timeStart = new Date().getTime();
                const { stderr, stdout } = yield (0, utils_1.runCommand)(command)
                    .catch(err => {
                    console.info(`❌ command ${command} failed`);
                    throw err;
                });
                stdout && console.info(`ℹ️ ${stdout}`);
                stderr && console.info(`⚠️ ${stderr}`);
                const timeTaken = new Date().getTime() - timeStart;
                console.info(`✅ completed '${command}' in ${timeTaken > 1000 ? `${timeTaken / 1000}s` : `${timeTaken}ms`}`);
            }
        }
        else {
            yield (0, build_1.default)(utils_1.projectConfig.build, utils_1.cliArgs);
        }
    });
}
exports.default = (0, utils_1.logTimeTaken)(() => {
    return main()
        .then(() => {
        return utils_1.cliArgs.deploy && (0, deploy_1.main)({ buildPath: utils_1.projectConfig.build.buildPath });
    });
});
